{"version":3,"sources":["dashboard.component.ts"],"names":[],"mappings":"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","file":"dashboard.component.js","sourcesContent":["import {Component, View, Inject, forwardRef, OnInit} from 'angular2/core';\nimport {RouteConfig, ROUTER_DIRECTIVES} from 'angular2/router';\nimport {tokenNotExpired} from 'angular2-jwt';\nimport {CanActivate} from \"angular2/router\";\nimport {RouteParams} from \"angular2/router\";\nimport {Router} from \"angular2/router\";\nimport {CORE_DIRECTIVES, FORM_DIRECTIVES } from \"angular2/common\";\nimport {AppComponent} from \"./app.component\";\nimport {Alert, Collapse} from \"ng2-bootstrap/ng2-bootstrap\";\nimport {QuestionFeedComponent} from \"./question-feed.component\";\nimport {QuestionInputFormComponent} from \"./question-form.component\";\nimport {ClassInputComponent} from \"./class-input.component\";\nimport {HTTPService} from \"./services/http-service\";\nimport {Question} from \"./models/question\";\n\n@Component({\n    selector: 'dashboard',\n    providers: [HTTPService]\n})\n\n@View({\n    templateUrl: 'views/dashboard.html',\n    directives: [ ROUTER_DIRECTIVES, Alert, QuestionFeedComponent,\n        ClassInputComponent , QuestionInputFormComponent, Collapse]\n})\n\n/**\n *\n * This means the user can only navigate to this route if they have a JWT and\n * it hasn't expired yet. Not too sure how to refresh this and manage the lifecycle\n * (could be checking if a JWT is in localStorage? must confirm)\n */\n//@CanActivate(() => tokenNotExpired())\n\n/**\n * This is the main class for application - the dashboard.\n * Here the comment feed is visible to the logged in user.\n * The user can post comments, answer questions, join classes etc.\n */\nexport class DashboardComponent implements OnInit {\n\n    /**\n     * This is the JWT for the user's authentication\n     */\n    id_token: string;\n    emptyFeed: boolean = true;\n\n    public classes:string[] = [];\n    public userQuestionIds: string[];\n    public selectedClass:string;\n    questions: Question[];\n\n    public isCollapsedQuestion:boolean = true;\n    public isCollapsedClass:boolean = true;\n    /**\n     * For the constructor must inject the parent \"loginComponent\" as\n     * need to change parent variables which control button states (e.g.\n     * the login/logout button in this case)\n     * @param _parent\n     */\n    constructor(@Inject(forwardRef(() => AppComponent)) private _parent:AppComponent,\n                private httpService: HTTPService) {\n        console.log(\"Set user as logged in (button state)\");\n        _parent.setLoggedIn();\n    }\n\n    /**\n     * This is called in child component instead of onInit because\n     * it's called when this component is routed to while onInit isn't\n     * (onInit may only be activated when the component is created? not\n     * sure must come back to this.. there were issues on the angular2 forum)\n     * @param next\n     * @param prev\n     */\n    ngOnInit() {\n        console.log(\"Navigated to dashboard\");\n        this.id_token = localStorage.getItem('id_token');\n\n        // populate the class dropdown box and load the question feed\n        this.getClassList();\n        // get all user questions\n        this.userQuestionIds = JSON.parse(localStorage.getItem('user')).questions;\n    }\n\n    classChange(value:string){\n        console.log(\"changed\");\n        this.selectedClass = value;\n        this.getQuestions();\n    }\n\n    getClassList(){\n        var classListArray = [];\n        this.httpService.getAllClasses().subscribe(\n            data => classListArray = JSON.parse(JSON.stringify(data)),\n            error => alert(error),\n            () => this.populateClassDropdown(classListArray)\n        );\n    }\n\n    populateClassDropdown(classListArray:JSON[]){\n        this.classes = [];\n        for(var item of classListArray){\n            this.classes.push(JSON.parse(JSON.stringify(item)).name);\n        }\n        this.selectedClass = this.classes[0];\n        this.getQuestions();\n    }\n\n    getQuestions(){\n        var questionListArray = [];\n        this.httpService.getQuestion(this.selectedClass).subscribe(\n            data => questionListArray = JSON.parse(JSON.stringify(data)),\n            error => alert(error),\n            () => this.populateFeed(questionListArray)\n        );\n    }\n\n    populateFeed(questionArray: JSON[]){\n        this.questions = [];\n        for(var item of questionArray){\n            console.log((JSON.parse(JSON.stringify(item)).classid));\n            var question = new Question(\n                (JSON.parse(JSON.stringify(item)).classid),\n                (JSON.parse(JSON.stringify(item)).question),\n                (JSON.parse(JSON.stringify(item)).summary),\n                (JSON.parse(JSON.stringify(item)).choices),\n                (JSON.parse(JSON.stringify(item)).answers),\n                (JSON.parse(JSON.stringify(item)).userid),\n                (JSON.parse(JSON.stringify(item)).date),\n                (JSON.parse(JSON.stringify(item)).type),\n                (JSON.parse(JSON.stringify(item)).anonymous),\n                (JSON.parse(JSON.stringify(item)).username),\n                (JSON.parse(JSON.stringify(item)).picture));\n            this.questions.push(question);\n        }\n        if(this.questions.length > 0){\n            this.emptyFeed = false;\n        }\n        else{\n            this.emptyFeed = true;\n        }\n    }\n}"],"sourceRoot":"/source/"}