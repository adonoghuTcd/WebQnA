{"version":3,"sources":["question-form.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA6BA;gBAmBI,oCAAkE,OAA0B,EACxE,IAAU,EAAU,WAAwB;oBADE,YAAO,GAAP,OAAO,CAAmB;oBACxE,SAAI,GAAJ,IAAI,CAAM;oBAAU,gBAAW,GAAX,WAAW,CAAa;oBAlBzD,UAAK,GAAY,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;oBAC/C,UAAK,GAAQ,IAAI,IAAI,EAAE,CAAC;oBAG/B,WAAM,GAAG,IAAI,CAAC;oBAEd,kBAAa,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,aAAa,EAC3C,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EACnD,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EACrB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EACb,EAAE,CAAC,CAAC;oBAeR,cAAS,GAAG,KAAK,CAAC;oBATd,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;oBAEhD,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;oBACtB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE;wBACrB,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;wBAChE,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;oBAChC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClB,CAAC;gBAID,6CAAQ,GAAR;oBACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;oBAEtB,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;oBACxB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAChC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAChC,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;oBAEhD,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBAC9C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAClB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,SAAS,CACxC,UAAA,IAAI,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAjC,CAAiC,EACzC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,KAAK,CAAC,EAAZ,CAAY,EACrB,cAAM,OAAA,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,EAApC,CAAoC,CAC7C,CAAC;oBACF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBAEhD,IAAI,CAAC,aAAa,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,aAAa,EAChD,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EACnD,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EACrB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EACb,EAAE,CAAC,CAAC;oBAER,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBACvC,IAAI,CAAC,OAAO,CAAC,mBAAmB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC;oBACrE,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBAChC,CAAC;gBA/EL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,qBAAqB;wBAC/B,SAAS,EAAE,CAAC,0BAAW,CAAC;wBACxB,MAAM,EAAE,CAAC,eAAe,CAAC;qBAC5B,CAAC;oBAED,WAAI,CAAC;wBACF,WAAW,EAAE,gCAAgC;wBAC7C,UAAU,EAAE,EAAE;qBACjB,CAAC;+BA0Be,aAAM,CAAC,iBAAU,CAAC,cAAM,OAAA,wCAAkB,EAAlB,CAAkB,CAAC,CAAC;;8CA1B3D;gBAwEF,iCAAC;YAAD,CAjEA,AAiEC,IAAA;YAjED,mEAiEC,CAAA","file":"question-form.component.js","sourcesContent":["\n/**\n * Created by kfraser on 24/02/2016.\n */\nimport {Component, View, forwardRef, Inject} from 'angular2/core';\nimport {Http, Response, Headers} from 'angular2/http';\nimport {Question} from \"./models/question\";\nimport {HTTPService} from \"./services/http-service\";\nimport {DatePipe} from \"angular2/common\";\nimport {DashboardComponent} from \"./dashboard.component\";\n\ndeclare var io: any;\n\n@Component({\n    selector: 'question-input-form',\n    providers: [HTTPService],\n    inputs: ['selectedClass']\n})\n\n@View({\n    templateUrl: 'views/question_input_form.html',\n    directives: []\n})\n\n/**\n * This is a default component - intentionally empty (including the\n * html) as it's needed when a child must have a terminal state.\n * TODO: get user id from user when user model is updated\n */\nexport class QuestionInputFormComponent{\n\n    public types:string[] = [\"Free-text\", \"Multi-choice\"];\n    public today:Date = new Date();\n    selectedClass: string;\n\n    socket = null;\n\n    questionModel = new Question(this.selectedClass,\n        \"\",\n        \"\",\n        [],\n        [],\n        JSON.parse(localStorage.getItem('profile')).user_id,\n        this.today.toString(),\n        this.types[0],\n        \"\");\n\n\n    constructor(@Inject(forwardRef(() => DashboardComponent)) private _parent:DashboardComponent,\n                private http: Http, private httpService: HTTPService){\n\n        this.selectedClass = this._parent.selectedClass;\n\n        this.socket = io('/');\n        this.socket.on('update', function(){\n            console.log('Message from server: question feed to be updated');\n            this._parent.getQuestions();\n        }.bind(this));\n    }\n\n    submitted = false;\n\n    onSubmit(){\n        this.submitted = true;\n\n        this.today = new Date();\n        console.log(this.questionModel);\n        console.log(this.selectedClass);\n        this.questionModel.classid = this.selectedClass;\n\n        var json = JSON.stringify(this.questionModel);\n        console.log(json);\n        this.httpService.addQuestion(json).subscribe(\n            data => console.log(JSON.stringify(data)),\n            error => alert(error),\n            () => console.log(\"post question success\")\n        );\n        console.log(JSON.stringify(this.questionModel));\n\n        this.questionModel = new Question(this.selectedClass,\n            \"\",\n            \"\",\n            [],\n            [],\n            JSON.parse(localStorage.getItem('profile')).user_id,\n            this.today.toString(),\n            this.types[0],\n            \"\");\n\n        this.socket.emit('update', 'question');\n        this._parent.isCollapsedQuestion = !this._parent.isCollapsedQuestion;\n        this._parent.getQuestions();\n    }\n\n}"],"sourceRoot":"/source/"}