{"version":3,"sources":["services/http-service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBACI,YAAoB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;gBAAE,CAAC;gBAEjC;;;;;mBAKG;gBACH,WAAW,CAAC,SAAiB;oBACzB,IAAI,WAAW,GAAG,aAAa,GAAC,SAAS,CAAC;oBAC1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,GAAC,WAAW,CAAC;yBAChD,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBAChC,CAAC;gBAED,mBAAmB,CAAC,IAAY;oBAC5B,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EACzB,kBAAkB,CAAC,CAAC;oBAExB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAC5C,IAAI,EAAE;wBACF,OAAO,EAAE,OAAO;qBACnB,CAAC,CAAC,GAAG,CAAE,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBACnC,CAAC;gBAED;;;;;mBAKG;gBACH,WAAW,CAAC,IAAY;oBAEpB,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAC7B,kBAAkB,CAAC,CAAC;oBAEpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EACxC,IAAI,EAAE;wBACE,OAAO,EAAE,OAAO;qBACnB,CAAC,CAAC,GAAG,CAAE,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBACnC,CAAC;gBAED,cAAc,CAAC,IAAY;oBACvB,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EACzB,kBAAkB,CAAC,CAAC;oBAExB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EACvC,IAAI,EAAE;wBACF,OAAO,EAAE,OAAO;qBACnB,CAAC,CAAC,GAAG,CAAE,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBACnC,CAAC;gBAED,cAAc,CAAC,MAAc;oBACzB,IAAI,WAAW,GAAG,UAAU,GAAC,MAAM,CAAC;oBACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,GAAC,WAAW,CAAC;yBAC/C,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC5B,CAAC;gBAED,QAAQ,CAAC,IAAY;oBACjB,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EACzB,kBAAkB,CAAC,CAAC;oBAExB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EACjC,IAAI,EAAE;wBACF,OAAO,EAAE,OAAO;qBACnB,CAAC,CAAC,GAAG,CAAE,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBACnC,CAAC;gBAED,aAAa;oBACT,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC;yBAClC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBAChC,CAAC;gBAED,iBAAiB,CAAC,IAAY;oBAC1B,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EACzB,kBAAkB,CAAC,CAAC;oBAExB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EACpC,IAAI,EAAE;wBACF,OAAO,EAAE,OAAO;qBACnB,CAAC,CAAC,GAAG,CAAE,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBACnC,CAAC;gBAED,aAAa,CAAC,IAAY;oBACtB,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;oBAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EACzB,kBAAkB,CAAC,CAAC;oBAExB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAClC,IAAI,EAAE;wBACF,OAAO,EAAE,OAAO;qBACnB,CAAC,CAAC,GAAG,CAAE,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBACnC,CAAC;YAEL,CAAC;YApGD;gBAAC,iBAAU,EAAE;;2BAAA;YACb,qCAmGC,CAAA","file":"services/http-service.js","sourcesContent":["/**\n * Created by kfraser on 27/02/2016.\n */\nimport {Injectable} from 'angular2/core';\nimport {Http, Response, Headers, URLSearchParams} from 'angular2/http';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class HTTPService {\n    constructor(private http: Http){}\n\n    /**\n     * Get a list of questions for a given class name (class\n     * names are unique)\n     * @param className\n     * @returns {Observable<R>}\n     */\n    getQuestion(className: string){\n        let queryString = '?classname='+className;\n        return this.http.get('/api/getquestions'+queryString)\n            .map(res => res.json());\n    }\n\n    getSelectedQuestion(json: string){\n        var headers = new Headers();\n        headers.append('Content-Type',\n            'application/json');\n\n        return this.http.post('/api/getselectedquestion',\n            json, {\n                headers: headers\n            }).map( res => res.json());\n    }\n\n    /**\n     * Adds new question to question table. Adds id to the given class\n     * table. Adds question id to the user.\n     * @param json\n     * @returns {Observable<R>}\n     */\n    addQuestion(json: string){\n\n        var headers = new Headers();\n        headers.append('Content-Type',\n        'application/json');\n\n        return this.http.post('/api/addquestion',\n        json, {\n                headers: headers\n            }).map( res => res.json());\n    }\n\n    updateQuestion(json: string){\n        var headers = new Headers();\n        headers.append('Content-Type',\n            'application/json');\n\n        return this.http.post('/api/updatequestion',\n            json, {\n                headers: headers\n            }).map( res => res.json());\n    }\n\n    getUserDetails(userId: string){\n        let queryString = '?userid='+userId;\n        return this.http.get('/api/getuser'+queryString)\n        .map(res => res.json());\n    }\n\n    addClass(json: string){\n        var headers = new Headers();\n        headers.append('Content-Type',\n            'application/json');\n\n        return this.http.post('/api/addclass',\n            json, {\n                headers: headers\n            }).map( res => res.json());\n    }\n\n    getAllClasses(){\n        return this.http.get('/api/getclasses')\n            .map(res => res.json());\n    }\n\n    updateUserClasses(json: string){\n        var headers = new Headers();\n        headers.append('Content-Type',\n            'application/json');\n\n        return this.http.post('/api/userclasses',\n            json, {\n                headers: headers\n            }).map( res => res.json());\n    }\n\n    sendAuthEmail(json: string){\n        var headers = new Headers();\n        headers.append('Content-Type',\n            'application/json');\n\n        return this.http.post('/api/authorise',\n            json, {\n                headers: headers\n            }).map( res => res.json());\n    }\n\n}\n"],"sourceRoot":"/source/"}